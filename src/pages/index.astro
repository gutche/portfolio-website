---
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import crtImage from "../assets/crt.png";
import profileImage from "../assets/profile.png";
import CrtEffect from "../components/CrtEffect.astro";
import InfoTab from "../components/tabs/InfoTab.astro";
import SkillsTab from "../components/tabs/SkillsTab.astro";
import ProjectsTab from "../components/tabs/ProjectsTab.astro";
import TimelineTab from "../components/tabs/TimelineTab.astro";
import SocialsTab from "../components/tabs/SocialsTab.astro";
import ContactTab from "../components/tabs/ContactTab.astro";

// Import data
import { skills } from "../data/skills";
import { projects } from "../data/projects";

const tabs = ["info", "skills", "projects", "timeline", "socials"];
---

<Layout>
	<!-- Audio Overlay -->
	<div
		id="audioOverlay"
		class="fixed inset-0 bg-black bg-opacity-95 z-50 flex items-center justify-center">
		<div
			class="bg-neutral-900 p-8 rounded-lg max-w-md w-full mx-4 border border-neutral-800 shadow-2xl">
			<h2 class="text-2xl mb-6 text-center">Audio Experience</h2>
			<p class="text-neutral-400 mb-8 text-center">
				This site features an immersive audio experience with retro
				sound effects. Would you like to enable audio? (Recommended)
			</p>
			<div class="flex gap-4 justify-center">
				<button
					id="enableAudio"
					class="px-6 py-3 bg-neutral-800 hover:bg-neutral-700 rounded-md transition-colors duration-200 flex items-center gap-2">
					Enable Audio
				</button>
				<button
					id="skipAudio"
					class="px-6 py-3 bg-transparent hover:bg-neutral-800 rounded-md transition-colors duration-200 border border-neutral-700">
					Continue Without Audio
				</button>
			</div>
		</div>
	</div>
	<div class="md:h-screen flex md:overflow-hidden">
		<!-- Add hidden element to store projects data -->
		<div
			id="projects-data"
			data-projects={JSON.stringify(projects)}
			data-profile-image={profileImage.src}
			class="hidden">
		</div>
		<!-- Add hidden element to store skills data -->
		<div
			id="skills-data"
			data-skills={JSON.stringify(skills)}
			class="hidden">
		</div>
		<div class="lines flex-1"></div>
		<div class="flex w-full max-w-[1400px]">
			<div class="flex-1 w-full md:max-w-[500px]">
				<div class="p-3 pb-24 md:p-4 flex flex-col h-full">
					<!-- Top part -->
					<div
						class="flex justify-between items-center gap-1 mb-4 md:mb-12">
						<div
							class="flex flex-col flex-1 h-10 gap-px justify-between">
							<div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div>
						</div>
					</div>
					<!-- Top part -->

					<div class="flex flex-col gap-2 flex-1 overflow-hidden">
						<p class="text-base hidden md:block">INFORMATION</p>
						<div class="min-h-4 md:min-h-8 w-full lines mb-1"></div>
						<div
							class="flex flex-col gap-3 md:flex-row md:gap-8 min-h-0">
							<!-- Tab Buttons -->
							<div class="flex md:flex-col gap-2">
								{
									tabs.map((tab) => (
										<button
											data-tab={tab}
											class="tab-button relative text-left text-uppercase whitespace-nowrap uppercase text-sm opacity-50 focus max-md:border max-md:border-transparent border-dotted max-md:px-1 max-md:pt-1 max-md:pb-0.5 cursor-pointer"
											aria-selected={
												tab === "info"
													? "true"
													: "false"
											}>
											{tab.toUpperCase()}
										</button>
									))
								}
							</div>
							<!-- Mobile CRT -->
							<div class="w-full md:hidden">
								<div
									class="relative w-full aspect-square max-w-xs mx-auto">
									<!-- Monitor overlay -->
									<Image
										alt="monitor"
										loading="lazy"
										decoding="async"
										class="select-none pointer-events-none absolute inset-0 w-full h-full z-10"
										sizes="100vw"
										src={crtImage}
									/>

									<!-- CRT effect container -->
									<div
										class="absolute inset-[5%] rounded-2xl overflow-hidden z-5">
										<CrtEffect
											imageUrl={profileImage.src}
											isMobile={true}
											text="Gledrian Gutierrez"
											subText="Software Engineer, ELEVENLABS"
										/>
									</div>
								</div>
							</div>
							<!-- Tab Content Sections -->
							<div id="tab-content" class="w-full">
								<InfoTab />
								<SkillsTab />
								<ProjectsTab />
								<TimelineTab />
								<SocialsTab />
								<ContactTab />
							</div>
						</div>
					</div>

					<div
						class="fixed bottom-0 left-0 right-0 bg-neutral-900 p-2 md:relative md:p-0 md:border-none md:bg-transparent md:mt-auto md:bottom-auto">
						<div
							class="absolute top-0 left-0 right-0 w-full md:hidden">
							<div class="h-px bg-white w-full opacity-10">
							</div><div class="h-px bg-black w-full"></div>
						</div><div class="relative flex gap-0.5 p-0.5 w-full">
							<div class="flex-1">
								<div
									class="absolute inset-0 bg-black z-0 blur-[1px] shadow-[0_1px_1px_rgba(255,255,255,0.3)] rounded-[6px]">
								</div>
								<a
									href="https://mail.google.com/mail/?view=cm&fs=1&to=gledrian.dev@gmail.com&su=Hey%20Gledrian!"
									target="_blank"
									rel="noopener noreferrer"
									class="z-10 relative p-2 bg-neutral-900 w-full h-14 shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45),_inset_0_1px_2px_rgba(255,255,255,0.3)] rounded-[4px] focus active:shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45)] active:scale-[0.99] transition-all duration-200 block hover:bg-neutral-800"
									><div
										class="h-full w-full flex items-center justify-center rounded-full bg-neutral-900 blur-[2px] shadow-[inset_0_2px_4px_rgba(255,255,255,0.2),_0_5px_4px_rgba(0,0,0,0.75)]">
									</div><span
										class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-base uppercase pt-1 whitespace-nowrap"
										>Send a message</span
									></a
								>
							</div>
							<div class="w-14">
								<div
									class="absolute inset-0 bg-black z-0 blur-[1px] shadow-[0_1px_1px_rgba(255,255,255,0.3)] rounded-[6px]">
								</div><button
									id="audioButton"
									class="z-10 relative p-2 bg-neutral-900 w-full h-14 shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45),_inset_0_1px_2px_rgba(255,255,255,0.3)] rounded-[4px] focus active:shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45)] active:scale-[0.99] transition-all duration-200"
									><div
										class="h-full w-full flex items-center justify-center rounded-full bg-neutral-900 blur-[2px] shadow-[inset_0_2px_4px_rgba(255,255,255,0.2),_0_5px_4px_rgba(0,0,0,0.75)]">
									</div><span
										class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-base uppercase pt-1 whitespace-nowrap"
										><svg
											fill="none"
											xmlns="http://www.w3.org/2000/svg"
											viewBox="0 0 24 24"
											width="16"
											height="16"
											><path
												d="M11 2h2v20h-2v-2H9v-2h2V6H9V4h2V2zM7 8V6h2v2H7zm0 8H3V8h4v2H5v4h2v2zm0 0v2h2v-2H7zm10-6h-2v4h2v-4zm2-2h2v8h-2V8zm0 8v2h-4v-2h4zm0-10v2h-4V6h4z"
												fill="currentColor"></path></svg
										></span
									><span
										id="audioIndicator"
										class="absolute top-1.5 right-1.5 w-1.5 h-1.5 bg-[#FFF9FB] rounded-full blur-[0.4px] shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]"
									></span></button
								>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="hidden md:flex">
				<div class="h-screen bg-white w-px opacity-10"></div>
				<div class="h-screen w-px bg-black"></div>
			</div>

			<!-- Desktop CRT -->
			<div class="hidden flex-1 md:flex items-center">
				<div
					style="position:relative;width:85%;padding-bottom:85%;margin:0 auto">
					<div
						style="position:absolute;top:0;right:0;bottom:0;left:0">
						<div class="relative h-full w-full">
							<!-- Monitor overlay -->
							<Image
								alt="monitor"
								loading="lazy"
								decoding="async"
								class="select-none pointer-events-none absolute inset-0 w-full h-full z-10"
								sizes="100vw"
								src={crtImage}
							/>

							<!-- CRT effect container -->
							<div
								class="absolute inset-[5%] rounded-3xl overflow-hidden z-5">
								<CrtEffect
									imageUrl={profileImage.src}
									text="Gledrian Gutierrez"
									subText="Software Engineer, ELEVENLABS"
								/>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="lines flex-1"></div>
	</div>
	<div class="noise"></div>

	<!-- Audio elements for sound effects -->
	<audio id="click-sound" src="/src/assets/click.wav" preload="auto"></audio>
	<audio id="switch-sound" src="/src/assets/switch.wav" preload="auto"
	></audio>
	<audio id="bgAudio" src="/src/assets/ambient.mp3" loop preload="auto"
	></audio>
</Layout>

<script>
	import {
		handleTabSwitch,
		playAudio,
		updateCrtDisplay,
	} from "../utils/helpers";

	document.addEventListener("DOMContentLoaded", () => {
		// Audio overlay elements
		const audioOverlay = document.getElementById("audioOverlay");
		const enableAudioBtn = document.getElementById("enableAudio");
		const skipAudioBtn = document.getElementById("skipAudio");

		// Get profile image from data attributes
		const profileImageUrl = document
			.getElementById("projects-data")
			?.getAttribute("data-profile-image");

		// Sound elements
		const clickSound = document.getElementById(
			"click-sound"
		) as HTMLAudioElement;
		const switchSound = document.getElementById(
			"switch-sound"
		) as HTMLAudioElement;
		const bgAudio = document.getElementById("bgAudio") as HTMLAudioElement;
		const audioButton = document.getElementById("audioButton");
		const audioIndicator = document.getElementById("audioIndicator");

		// Set volume for sound effects
		if (clickSound) clickSound.volume = 0.5;
		if (switchSound) switchSound.volume = 0.5;
		if (bgAudio) bgAudio.volume = 0.5;

		let isPlaying = false;

		// Initialize the indicator to red (muted state)
		audioIndicator?.classList.remove(
			"shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]"
		);
		audioIndicator?.classList.add(
			"shadow-[0_0_10.4px_#FF0000,0_0_3.2px_#FF0000,0_0_3.2px_#FF0000]"
		);

		// Audio overlay handlers
		enableAudioBtn?.addEventListener("click", () => {
			if (audioOverlay) {
				audioOverlay.style.display = "none";
			}
			// Enable audio
			playAudio(bgAudio, audioIndicator!, isPlaying);
			isPlaying = true;
		});

		skipAudioBtn?.addEventListener("click", () => {
			if (audioOverlay) {
				audioOverlay.style.display = "none";
			}
			// Keep audio disabled
			isPlaying = false;
		});

		// Audio toggle functionality
		const toggleAudio = (e: Event) => {
			e.preventDefault();
			e.stopPropagation();
			console.log("Toggle audio clicked");
			playAudio(bgAudio, audioIndicator!, isPlaying);
			isPlaying = !isPlaying;
		};

		// Function to play click sound
		const playClickSound = () => {
			if (clickSound && isPlaying) {
				clickSound.currentTime = 0;
				clickSound
					.play()
					.catch((e) => console.log("Error playing sound:", e));
			}
		};

		// Function to play switch sound
		const playSwitchSound = () => {
			if (switchSound && isPlaying) {
				switchSound.currentTime = 0;
				switchSound
					.play()
					.catch((e) => console.log("Error playing sound:", e));
			}
		};

		// Add click listener to audio button and its children
		if (audioButton) {
			audioButton.addEventListener("click", toggleAudio);
			// Also add to the span inside the button in case event bubbling is blocked
			const audioButtonSpan = audioButton.querySelector("span");
			if (audioButtonSpan) {
				audioButtonSpan.addEventListener("click", toggleAudio);
			}
		}

		// Add click event listeners to all tab buttons
		const tabButtons = document.querySelectorAll(".tab-button");
		const tabPanels = document.querySelectorAll(".tab-panel");
		const tabLinks = document.querySelectorAll(".tab-link");

		// Set the first tab as active by default
		handleTabSwitch(tabButtons, tabPanels, "info");

		// Initialize CRT display with profile picture
		updateCrtDisplay(
			profileImageUrl || "",
			"Gledrian Gutierrez",
			"Software Engineer, ELEVENLABS"
		);

		tabButtons.forEach((button) => {
			button.addEventListener("click", () => {
				playClickSound();
				const targetTab = button.getAttribute("data-tab");
				handleTabSwitch(tabButtons, tabPanels, targetTab || "");

				if (targetTab === "info" && profileImageUrl) {
					// Restore profile picture when going back to info tab
					updateCrtDisplay(
						profileImageUrl,
						"Gledrian Gutierrez",
						"Software Engineer, ELEVENLABS"
					);
				}
			});
		});

		tabLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				playSwitchSound();
			});
		});
	});
</script>

<style>
	/* Add any additional styles for tab functionality */
	.tab-button[aria-selected="true"] {
		opacity: 1;
	}

	.tab-button:focus {
		outline: none;
	}

	@media (min-width: 768px) {
		.tab-button::after {
			content: "";
			position: absolute;
			top: 0;
			bottom: 0;
			right: -8px;
			width: 4px;
			background: transparent;
			transition: background-color 0.2s ease;
		}

		.tab-button[aria-selected="true"]::after {
			background-color: white;
		}
	}

	.tab-link {
		transition: opacity 0.2s ease;
	}

	.tab-link:hover {
		opacity: 0.8;
	}
</style>
