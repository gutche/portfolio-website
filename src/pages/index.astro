---
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import crtImage from "../assets/crt.png";
import profileImage from "../assets/profile.png";
import CrtEffect from "../components/CrtEffect.astro";
import ambientAudio from "../assets/ambient.mp3";

// Import tab components
import InfoTab from "../components/tabs/InfoTab.astro";
import SkillsTab from "../components/tabs/SkillsTab.astro";
import ProjectsTab from "../components/tabs/ProjectsTab.astro";
import TimelineTab from "../components/tabs/TimelineTab.astro";
import SocialsTab from "../components/tabs/SocialsTab.astro";
import ContactTab from "../components/tabs/ContactTab.astro";

// Import data
import { skills } from "../data/skills";
import { projects } from "../data/projects";

const tabs = ["info", "skills", "projects", "timeline", "socials", "contact"];

// Skills data with icons and descriptions
const skillsData = [
	{
		id: "frontend",
		title: "Frontend Development",
		description: "Expertise in modern frontend frameworks and responsive design",
		technologies: "React, Vue, Angular",
		icon: "https://cdn-icons-png.flaticon.com/512/1183/1183672.png"
	},
	{
		id: "backend",
		title: "Backend Development",
		description: "Building scalable server-side applications and APIs",
		technologies: "Node.js, Python",
		icon: "https://cdn-icons-png.flaticon.com/512/5968/5968322.png"
	},
	{
		id: "cloud",
		title: "Cloud Infrastructure",
		description: "Designing and managing cloud-based solutions",
		technologies: "AWS, GCP",
		icon: "https://cdn-icons-png.flaticon.com/512/4727/4727496.png"
	}
];

// Project data with mock images
const projectsData = [
	{
		id: "voice-ai",
		title: "Voice AI Platform",
		description: "AI-powered voice synthesis and analysis platform",
		image: "https://picsum.photos/800/800?random=1"
	},
	{
		id: "portfolio",
		title: "Portfolio Website",
		description: "Personal portfolio with CRT effect",
		image: "https://picsum.photos/800/800?random=2"
	},
	{
		id: "ecommerce",
		title: "E-commerce Solution",
		description: "Full-stack e-commerce platform",
		image: "https://picsum.photos/800/800?random=3"
	}
];
---

<Layout>
	<div class="md:h-screen flex md:overflow-hidden">
		<!-- Add hidden element to store projects data -->
		<div id="projects-data" data-projects={JSON.stringify(projects)} data-profile-image={profileImage.src} class="hidden"></div>
		<!-- Add hidden element to store skills data -->
		<div id="skills-data" data-skills={JSON.stringify(skills)} class="hidden"></div>
		<div class="lines flex-1"></div>
		<div class="flex w-full max-w-[1400px]">
			<div class="flex-1 w-full md:max-w-[500px]">
				<div class="p-3 pb-24 md:p-4 flex flex-col h-full">
					<!-- Top part -->
					<div
						class="flex justify-between items-center gap-1 mb-4 md:mb-12">
						<div
							class="flex flex-col flex-1 h-10 gap-px justify-between">
							<div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div><div>
								<div class="h-px bg-white w-full opacity-10">
								</div><div class="h-px bg-neutral-950 w-full">
								</div>
							</div>
						</div>
					</div>
					<!-- Top part -->

					<div class="flex flex-col gap-2 flex-1 overflow-hidden">
						<p class="text-base hidden md:block">INFORMATION</p>
						<div class="min-h-4 md:min-h-8 w-full lines mb-1"></div>
						<div
							class="flex flex-col gap-3 md:flex-row md:gap-8 min-h-0">
							<!-- Tab Buttons -->
							<div class="flex md:flex-col gap-2">
								{
									tabs.map((tab) => (
										<button
											data-tab={tab}
											class="tab-button relative text-left text-uppercase whitespace-nowrap uppercase text-sm opacity-50 focus max-md:border max-md:border-transparent border-dotted max-md:px-1 max-md:pt-1 max-md:pb-0.5 cursor-pointer"
											aria-selected={
												tab === "info"
													? "true"
													: "false"
											}>
											{tab.toUpperCase()}
										</button>
									))
								}
							</div>
							<!-- Mobile CRT -->
							<div class="w-full md:hidden">
								<div
									class="relative w-full aspect-square max-w-xs mx-auto">
									<!-- Monitor overlay -->
									<Image
										alt="monitor"
										loading="lazy"
										decoding="async"
										class="select-none pointer-events-none absolute inset-0 w-full h-full z-10"
										sizes="100vw"
										src={crtImage}
									/>

									<!-- CRT effect container -->
									<div
										class="absolute inset-[5%] rounded-2xl overflow-hidden z-5">
										<CrtEffect
											imageUrl={profileImage.src}
											isMobile={true}
											text="Gledrian Gutierrez"
											subText="Software Engineer, ELEVENLABS"
										/>
									</div>
								</div>
							</div>
							<!-- Tab Content Sections -->
							<div id="tab-content" class="w-full">
								<InfoTab />
								<SkillsTab class="hidden" />
								<ProjectsTab class="hidden" />
								<TimelineTab class="hidden" />
								<SocialsTab class="hidden" />
								<ContactTab class="hidden" />
							</div>
						</div>
					</div>

					<div
						class="fixed bottom-0 left-0 right-0 bg-neutral-900 p-2 md:relative md:p-0 md:border-none md:bg-transparent md:mt-auto md:bottom-auto">
						<div
							class="absolute top-0 left-0 right-0 w-full md:hidden">
							<div class="h-px bg-white w-full opacity-10">
							</div><div class="h-px bg-black w-full"></div>
						</div><div class="relative flex gap-0.5 p-0.5 w-full">
							<div class="flex-1">
								<div
									class="absolute inset-0 bg-black z-0 blur-[1px] shadow-[0_1px_1px_rgba(255,255,255,0.3)] rounded-[6px]">
								</div><button
									class="z-10 relative p-2 bg-neutral-900 w-full h-14 shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45),_inset_0_1px_2px_rgba(255,255,255,0.3)] rounded-[4px] focus active:shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45)] active:scale-[0.99] transition-all duration-200"
									><div
										class="h-full w-full flex items-center justify-center rounded-full bg-neutral-900 blur-[2px] shadow-[inset_0_2px_4px_rgba(255,255,255,0.2),_0_5px_4px_rgba(0,0,0,0.75)]">
									</div><span
										class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-base uppercase pt-1 whitespace-nowrap"
										>Send a message</span
									></button
								>
							</div>
							<div class="w-14">
								<div
									class="absolute inset-0 bg-black z-0 blur-[1px] shadow-[0_1px_1px_rgba(255,255,255,0.3)] rounded-[6px]">
								</div><button
									id="audioButton"
									class="z-10 relative p-2 bg-neutral-900 w-full h-14 shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45),_inset_0_1px_2px_rgba(255,255,255,0.3)] rounded-[4px] focus active:shadow-[inset_0_-1px_4px_rgba(0,0,0,0.45)] active:scale-[0.99] transition-all duration-200"
									><div
										class="h-full w-full flex items-center justify-center rounded-full bg-neutral-900 blur-[2px] shadow-[inset_0_2px_4px_rgba(255,255,255,0.2),_0_5px_4px_rgba(0,0,0,0.75)]">
									</div><span
										class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-base uppercase pt-1 whitespace-nowrap"
										><svg
											fill="none"
											xmlns="http://www.w3.org/2000/svg"
											viewBox="0 0 24 24"
											width="16"
											height="16"
											><path
												d="M11 2h2v20h-2v-2H9v-2h2V6H9V4h2V2zM7 8V6h2v2H7zm0 8H3V8h4v2H5v4h2v2zm0 0v2h2v-2H7zm10-6h-2v4h2v-4zm2-2h2v8h-2V8zm0 8v2h-4v-2h4zm0-10v2h-4V6h4z"
												fill="currentColor"></path></svg
										></span
									><span
										id="audioIndicator"
										class="absolute top-1.5 right-1.5 w-1.5 h-1.5 bg-[#FFF9FB] rounded-full blur-[0.4px] shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]"
									></span></button
								>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="hidden md:flex">
				<div class="h-screen bg-white w-px opacity-10"></div>
				<div class="h-screen w-px bg-black"></div>
			</div>

			<!-- Desktop CRT -->
			<div class="hidden flex-1 md:flex items-center">
				<div
					style="position:relative;width:85%;padding-bottom:85%;margin:0 auto">
					<div
						style="position:absolute;top:0;right:0;bottom:0;left:0">
						<div class="relative h-full w-full">
							<!-- Monitor overlay -->
							<Image
								alt="monitor"
								loading="lazy"
								decoding="async"
								class="select-none pointer-events-none absolute inset-0 w-full h-full z-10"
								sizes="100vw"
								src={crtImage}
							/>

							<!-- CRT effect container -->
							<div
								class="absolute inset-[5%] rounded-3xl overflow-hidden z-5">
								<CrtEffect
									imageUrl={profileImage.src}
									text="Gledrian Gutierrez"
									subText="Software Engineer, ELEVENLABS"
								/>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="lines flex-1"></div>
	</div>
	<div class="noise"></div>

	<!-- Audio elements for sound effects -->
	<audio id="click-sound" src="/src/assets/click.wav" preload="auto"></audio>
	<audio id="switch-sound" src="/src/assets/switch.wav" preload="auto"></audio>
	<audio id="bgAudio" src={ambientAudio} loop preload="auto"></audio>
</Layout>

<script>
	// Define project type
	interface Project {
		id: string;
		title: string;
		description: string;
		image: string;
	}

	// Define skill type
	interface Skill {
		id: string;
		title: string;
		description: string;
		technologies: string;
		icon: string;
	}

	document.addEventListener("DOMContentLoaded", () => {
		// Get projects data and profile image from data attributes
		const projectsData = document.getElementById('projects-data')?.getAttribute('data-projects');
		const profileImageUrl = document.getElementById('projects-data')?.getAttribute('data-profile-image');
		const projects: Project[] = projectsData ? JSON.parse(projectsData) : [];

		// Get skills data from data attributes
		const skillsData = document.getElementById('skills-data')?.getAttribute('data-skills');
		const skills: Skill[] = skillsData ? JSON.parse(skillsData) : [];

		// Sound elements
		const clickSound = document.getElementById("click-sound") as HTMLAudioElement;
		const switchSound = document.getElementById("switch-sound") as HTMLAudioElement;
		const bgAudio = document.getElementById('bgAudio') as HTMLAudioElement;
		const audioButton = document.getElementById('audioButton');
		const audioIndicator = document.getElementById('audioIndicator');

		// Set volume for sound effects
		if (clickSound) clickSound.volume = 0.5;
		if (switchSound) switchSound.volume = 0.5;
		if (bgAudio) bgAudio.volume = 0.5;

		let isPlaying = false;

		// Initialize the indicator to red (muted state)
		audioIndicator?.classList.remove('shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]');
		audioIndicator?.classList.add('shadow-[0_0_10.4px_#FF0000,0_0_3.2px_#FF0000,0_0_3.2px_#FF0000]');

		// Audio toggle functionality
		const toggleAudio = (e: Event) => {
			e.preventDefault();
			e.stopPropagation();
			console.log('Toggle audio clicked');
			
			if (!isPlaying) {
				// Play all sounds
				if (bgAudio) {
					const playPromise = bgAudio.play();
					if (playPromise !== undefined) {
						playPromise.then(() => {
							isPlaying = true;
							console.log('Audio started playing');
							audioIndicator?.classList.remove('shadow-[0_0_10.4px_#FF0000,0_0_3.2px_#FF0000,0_0_3.2px_#FF0000]');
							audioIndicator?.classList.add('shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]');
						}).catch(error => {
							console.error('Error playing audio:', error);
						});
					}
				}
			} else {
				// Mute all sounds
				if (bgAudio) {
					bgAudio.pause();
					isPlaying = false;
					console.log('Audio paused');
					audioIndicator?.classList.remove('shadow-[0_0_10.4px_#00FF0A,0_0_3.2px_#00FF0A,0_0_3.2px_#00FF0A]');
					audioIndicator?.classList.add('shadow-[0_0_10.4px_#FF0000,0_0_3.2px_#FF0000,0_0_3.2px_#FF0000]');
				}
			}
		};

		// Function to play click sound
		const playClickSound = () => {
			if (clickSound && isPlaying) {
				clickSound.currentTime = 0;
				clickSound.play().catch((e) => console.log("Error playing sound:", e));
			}
		};

		// Function to play switch sound
		const playSwitchSound = () => {
			if (switchSound && isPlaying) {
				switchSound.currentTime = 0;
				switchSound.play().catch((e) => console.log("Error playing sound:", e));
			}
		};

		// Add click listener to audio button and its children
		if (audioButton) {
			audioButton.addEventListener('click', toggleAudio);
			// Also add to the span inside the button in case event bubbling is blocked
			const audioButtonSpan = audioButton.querySelector('span');
			if (audioButtonSpan) {
				audioButtonSpan.addEventListener('click', toggleAudio);
			}
		}

		// Add click event listeners to all tab buttons
		const tabButtons = document.querySelectorAll(".tab-button");
		const tabPanels = document.querySelectorAll(".tab-panel");
		const tabLinks = document.querySelectorAll(".tab-link");

		// Set the first tab as active by default
		tabButtons[0].classList.add("opacity-100");
		tabButtons[0].classList.add("max-md:border-gray-400");
		tabButtons[0].setAttribute("aria-selected", "true");
		tabPanels[0].classList.remove("hidden");

		// Initialize CRT display with profile picture
		const crtContainer = document.querySelector('.crt-container');
		const mobileCrtContainer = document.querySelector('.crt-container-mobile');
		
		if (crtContainer && (crtContainer as any).crtEffect && profileImageUrl) {
			(crtContainer as any).crtEffect.updateImage(profileImageUrl);
			(crtContainer as any).crtEffect.updateText("Gledrian Gutierrez", "Software Engineer, ELEVENLABS");
		}
		
		if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect && profileImageUrl) {
			(mobileCrtContainer as any).crtEffect.updateImage(profileImageUrl);
			(mobileCrtContainer as any).crtEffect.updateText("Gledrian Gutierrez", "Software Engineer, ELEVENLABS");
		}

		tabButtons.forEach((button) => {
			button.addEventListener("click", () => {
				playClickSound();
				const targetTab = button.getAttribute("data-tab");

				tabButtons.forEach((btn) => {
					btn.classList.remove("opacity-100");
					btn.classList.remove("max-md:border-gray-400");
					btn.setAttribute("aria-selected", "false");
				});

				button.classList.add("opacity-100");
				button.classList.add("max-md:border-gray-400");
				button.setAttribute("aria-selected", "true");

				tabPanels.forEach((panel) => {
					panel.classList.add("hidden");
				});

				const activePanel = document.querySelector(
					`.tab-panel[data-tab="${targetTab}"]`
				);
				if (activePanel) {
					activePanel.classList.remove("hidden");
					
					if (targetTab === "projects") {
						const firstProject = document.querySelector('.project-item');
						if (firstProject) {
							// Remove selected class from all projects
							document.querySelectorAll('.project-item').forEach(project => {
								project.classList.remove('selected');
							});
							
							// Add selected class to first project
							firstProject.classList.add('selected');
							
							// Update CRT display with first project
							const project = projects[0];
							if (project) {
								if (crtContainer && (crtContainer as any).crtEffect) {
									(crtContainer as any).crtEffect.updateImage(project.image);
									(crtContainer as any).crtEffect.updateText(project.title, project.description);
								}
								
								if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect) {
									(mobileCrtContainer as any).crtEffect.updateImage(project.image);
									(mobileCrtContainer as any).crtEffect.updateText(project.title, project.description);
								}
							}
						}
					} else if (targetTab === "skills") {
						const firstSkill = document.querySelector('.skill-item');
						if (firstSkill) {
							// Remove selected class from all skills
							document.querySelectorAll('.skill-item').forEach(skill => {
								skill.classList.remove('selected');
							});
							
							// Add selected class to first skill
							firstSkill.classList.add('selected');
							
							// Update CRT display with first skill
							const skill = skills[0];
							if (skill) {
								if (crtContainer && (crtContainer as any).crtEffect) {
									(crtContainer as any).crtEffect.updateImage(skill.icon);
									(crtContainer as any).crtEffect.updateText(skill.title, skill.description);
								}
								
								if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect) {
									(mobileCrtContainer as any).crtEffect.updateImage(skill.icon);
									(mobileCrtContainer as any).crtEffect.updateText(skill.title, skill.description);
								}
							}
						}
					} else if (targetTab === "info" && profileImageUrl) {
						// Restore profile picture when going back to info tab
						if (crtContainer && (crtContainer as any).crtEffect) {
							(crtContainer as any).crtEffect.updateImage(profileImageUrl);
							(crtContainer as any).crtEffect.updateText("Gledrian Gutierrez", "Software Engineer, ELEVENLABS");
						}
						
						if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect) {
							(mobileCrtContainer as any).crtEffect.updateImage(profileImageUrl);
							(mobileCrtContainer as any).crtEffect.updateText("Gledrian Gutierrez", "Software Engineer, ELEVENLABS");
						}
					}
				}
			});
		});

		tabLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				playSwitchSound();
			});
		});

		// Project click handler
		const projectItems = document.querySelectorAll('.project-item');
		
		// Add selected class to first project by default
		const firstProject = document.querySelector('.project-item');
		if (firstProject) {
			firstProject.classList.add('selected');
		}
		
		projectItems.forEach(item => {
			item.addEventListener('click', () => {
				// Remove selected class from all projects
				projectItems.forEach(project => {
					project.classList.remove('selected');
				});
				
				// Add selected class to clicked project
				item.classList.add('selected');
				
				const projectId = item.getAttribute('data-project-id');
				const project = projects.find((p: Project) => p.id === projectId);
				
				if (project) {
					// Update desktop CRT
					if (crtContainer && (crtContainer as any).crtEffect) {
						(crtContainer as any).crtEffect.updateImage(project.image);
						(crtContainer as any).crtEffect.updateText(project.title, project.description);
					}
					
					// Update mobile CRT
					if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect) {
						(mobileCrtContainer as any).crtEffect.updateImage(project.image);
						(mobileCrtContainer as any).crtEffect.updateText(project.title, project.description);
					}
					
					// Play switch sound
					playSwitchSound();
				}
			});
		});

		// Skill click handler
		const skillItems = document.querySelectorAll('.skill-item');
		
		// Add selected class to first skill by default
		const firstSkill = document.querySelector('.skill-item');
		if (firstSkill) {
			firstSkill.classList.add('selected');
		}
		
		skillItems.forEach(item => {
			item.addEventListener('click', () => {
				// Remove selected class from all skills
				skillItems.forEach(skill => {
					skill.classList.remove('selected');
				});
				
				// Add selected class to clicked skill
				item.classList.add('selected');
				
				const skillId = item.getAttribute('data-skill-id');
				const skill = skills.find((s: Skill) => s.id === skillId);
				
				if (skill) {
					// Update desktop CRT
					if (crtContainer && (crtContainer as any).crtEffect) {
						(crtContainer as any).crtEffect.updateImage(skill.icon);
						(crtContainer as any).crtEffect.updateText(skill.title, skill.description);
					}
					
					// Update mobile CRT
					if (mobileCrtContainer && (mobileCrtContainer as any).crtEffect) {
						(mobileCrtContainer as any).crtEffect.updateImage(skill.icon);
						(mobileCrtContainer as any).crtEffect.updateText(skill.title, skill.description);
					}
					
					// Play switch sound
					playSwitchSound();
				}
			});
		});
	});
</script>

<style>
	/* Add any additional styles for tab functionality */
	.tab-button[aria-selected="true"] {
		opacity: 1;
	}

	.tab-button:focus {
		outline: none;
	}

	@media (min-width: 768px) {
		.tab-button::after {
			content: "";
			position: absolute;
			top: 0;
			bottom: 0;
			right: -8px;
			width: 4px;
			background: transparent;
			transition: background-color 0.2s ease;
		}

		.tab-button[aria-selected="true"]::after {
			background-color: white;
		}
	}

	.tab-link {
		transition: opacity 0.2s ease;
	}

	.tab-link:hover {
		opacity: 0.8;
	}

	.project-item {
		background: rgba(0, 0, 0, 0.2);
		border-radius: 4px;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.project-item:hover {
		background: rgba(0, 0, 0, 0.3);
	}

	.project-item.selected {
		background: rgba(255, 255, 255, 0.1);
		border-color: rgba(255, 255, 255, 0.3);
		box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
	}

	.skill-item {
		background: rgba(0, 0, 0, 0.2);
		border-radius: 4px;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.skill-item:hover {
		background: rgba(0, 0, 0, 0.3);
	}

	.skill-item.selected {
		background: rgba(255, 255, 255, 0.1);
		border-color: rgba(255, 255, 255, 0.3);
		box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
	}
</style>
