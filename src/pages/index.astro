---
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import crtImage from "../../public/images/crt.png";
import CrtEffect from "../components/crt/CrtEffect.tsx";
import InfoTab from "../components/tabs/InfoTab.astro";
import Career from "../components/tabs/Career.astro";
import Socials from "../components/tabs/Socials";
import HorizontalLines from "../components/HorizontalLines.astro";
import Buttons from "../components/Buttons.tsx";
import Skills from "../components/tabs/Skills";
import Projects from "../components/tabs/Projects";

const tabs = ["overview", "skills", "projects", "career", "socials"];
---

<Layout>
	<div class="flex w-full max-w-[1400px] bg-neutral-900">
		<div class="flex-1 w-full md:max-w-[500px]">
			<div class="p-3 pb-24 md:p-4 flex flex-col h-full">
				<HorizontalLines />
				<div class="flex flex-col gap-2 flex-1 overflow-hidden">
					<p class="text-base hidden md:block">INFORMATION</p>
					<div class="min-h-4 md:min-h-8 w-full lines mb-1"></div>
					<div
						class="flex flex-col gap-3 md:flex-row md:gap-8 min-h-0">
						<!-- Tab Buttons -->
						<div class="flex md:flex-col gap-2">
							{
								tabs.map((tab) => (
									<button
										data-tab={tab}
										class="tab-button relative text-left text-uppercase whitespace-nowrap uppercase text-sm opacity-50 focus">
										{tab}
									</button>
								))
							}
						</div>
						<!-- Mobile CRT -->
						<div class="w-full z-0 md:hidden">
							<div
								class="relative w-full aspect-square max-w-xs mx-auto">
								<!-- Monitor overlay -->
								<Image
									alt="monitor"
									loading="eager"
									decoding="async"
									class="absolute inset-0 w-full h-full z-10"
									sizes="100vw"
									src={crtImage}
								/>

								<!-- CRT effect container -->
								<div
									class="absolute inset-[5%] rounded-2xl overflow-hidden z-5">
									<CrtEffect client:load />
								</div>
							</div>
						</div>
						<!-- Tab Content Sections -->
						<div id="tab-content" class="w-full">
							<InfoTab />
							<Skills />
							<Projects client:visible />
							<Career />
							<Socials />
						</div>
					</div>
				</div>
				<Buttons client:load />
			</div>
		</div>

		<div class="hidden md:flex">
			<div class="h-screen bg-white w-px opacity-10"></div>
			<div class="h-screen w-px bg-black"></div>
		</div>

		<!-- Desktop CRT -->
		<div class="hidden flex-1 md:flex items-center">
			<div
				style="position:relative;width:85%;padding-bottom:85%;margin:0 auto">
				<div style="position:absolute;top:0;right:0;bottom:0;left:0">
					<div class="relative h-full w-full">
						<!-- Monitor overlay -->
						<Image
							alt="monitor"
							loading="eager"
							decoding="async"
							class="absolute inset-0 w-full h-full z-10"
							sizes="100vw"
							src={crtImage}
						/>

						<!-- CRT effect container -->
						<div
							class="absolute inset-[5%] rounded-3xl overflow-hidden z-5">
							<CrtEffect client:load />
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { displayParams } from "../stores/globalStore";
	import { handleTabSwitch } from "../utils/helpers";

	document.addEventListener("DOMContentLoaded", () => {
		// Sound elements
		const clickSound = document.getElementById(
			"click-sound"
		) as HTMLAudioElement;
		const switchSound = document.getElementById(
			"switch-sound"
		) as HTMLAudioElement;

		let isPlaying = false;

		// Function to play click sound
		const playClickSound = () => {
			if (clickSound && isPlaying) {
				clickSound.currentTime = 0;
				clickSound.volume = 0.2;
				clickSound
					.play()
					.catch((e) => console.log("Error playing sound:", e));
			}
		};

		// Function to play switch sound
		const playSwitchSound = () => {
			if (switchSound && isPlaying) {
				switchSound.currentTime = 0;
				switchSound.volume = 0.2;
				switchSound
					.play()
					.catch((e) => console.log("Error playing sound:", e));
			}
		};

		const tabButtons = document.querySelectorAll(".tab-button");
		const tabPanels = document.querySelectorAll(".tab-panel");
		const tabLinks = document.querySelectorAll(".tab-link");

		handleTabSwitch(tabButtons, tabPanels, "overview");

		tabButtons.forEach((button) => {
			button.addEventListener("click", () => {
				playClickSound();
				const targetTab = button.getAttribute("data-tab");
				handleTabSwitch(tabButtons, tabPanels, targetTab || "");

				if (targetTab !== "projects") {
					displayParams.set({
						image: "/images/profile.png",
						title: "Gledrian Gutierrez",
						description: "Software Engineer, ELEVENLABS",
					});
				} else {
					displayParams.set({
						image: "src/assets/astro-portfolio.png",
						title: "Old portfolio website",
						description:
							"Minimalist personal portfolio made with Astro",
					});
				}
			});
		});

		tabLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				playSwitchSound();
			});
		});
	});
</script>
